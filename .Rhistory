head(contacts1)
ls()
list.dir()
dir()
source("./RiA Source Code//RinA CH07 Code.txt")
getwd()
X <- read.table("http://www.bixsolutions.net/profiles.csv", sep=",", header=TRUE)
X
rangescale <- function(X) {
Xmax <- apply(X, 2, max)
Xscaled = scale(X, scale=Xmax, center=FALSE)
return(Xscaled)
};
Xscaled = rangescale(X)
Xscaled
d <- dist(t(Xscaled), method = "euclidean")
d
bitmap(file = "r-image-bixdata.jpg", type = "jpeg", width = 6, res = 96)
savePlot("r-image-bixdata.jpg", type = "jpeg")
dendrogram <- <- hclust(t(d), method = "complete", members = NULL)
dendrogram <- hclust(t(d), method = "complete", members = NULL)
dendrogram
jpeg("r-image-bixdata.jpg")
plot(dendrogram)
;
plot(dendrogram)
plot(dendrogram, type=c("rectangle","triangle",
frame.plot=T);
plot(dendrogram, type=c("rectangle","triangle",
frame.plot=T)
;
str(dendrogram)
plot(dendrogram)
head(X)
dendrogram
plot(X$x)
plot(sin, -pi, 2*pi)
hist(X$x)
dev.off()
plot(dendrogram)
jpeg("bixdata.jpeg")
plot(dendrogram)
dev.off()
d
jpeg(file="/Library/WebServer/Documents/tempfiles/r-image-2014428235616.jpg",type = "jpeg", width = 6, height = 6, res = 96)
jpeg(file="/Library/WebServer/Documents/tempfiles/r-image-2014428235616.jpg",width = 6, height = 6, res = 96)
dendrogram <- hclust(t(d), method = "complete", members = NULL)
plot(dendrogram)
jpeg(file="/Library/WebServer/Documents/tempfiles/r-image-2014428235616.jpg")
dendrogram <- hclust(t(d), method = "complete", members = NULL)
plot(dendrogram)
dev.off()
quit()
setwd("~/github/RprogAssign3")
outcome <- read.csv("Assignment3-data/outcome-of-care-measures.csv", colClasses="character")
ncol(outcome)
nrow(outcome)
colnames(outcome)
# the columns of interest are 2, 7, 11, 17 and 23 for respectively:
## Hospital.Name, State, Heart.Attack mortality, Heart.Failur mortality and Pneumonia mortality
outcome[1:20,c(2, 7, 11,17,23)]
## re-read the csv file, replacing 'Not Available' with NA
outcome <- read.csv("Assignment3-data/outcome-of-care-measures.csv", na.strings = "Not Available")
outcome[1:20,c(2, 7, 11,17,23)]
mortality <- outcome[, c(2, 7, 11,17,23)]
colnames(mortality) <- c("hospital", "state", "heart attack","heart failure","pneumonia")
str(mortality)
ls()
states <- as.character(unique(mortality$state))
diseases <- c("heart attack", "heart failure", "pneumonia")
check <- function(state, outcome) {
if(missing(state)) stop("missing argument")
if(missing(outcome)) stop("missing argument")
## allow variations in case
state = toupper(state)
outcome = tolower(outcome)
if(is.na(states[match(state,states)])) stop("invalid state")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
args <- paste(outcome,state, sep= " in ")
return(args)
}
check("TX", "heart failure")
stateoutcome <- function(state, outcome) {
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state,]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
besthospital <- as.character(mystate.df[stateorder[1],1])
return(besthospital)
}
stateoutcome("MD","pneumonia")
disease <- "heart_failure"
colnames(mortal)
colnames(mortality)
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
colnames(mortality)
state
state <- "TX"
mystate.df <- mortality[mortality$state == state && which(names(mystate.df) == disease),]
str(mystate.df)
which(names(mortality) == disease)
mortality$state == state
mystate.df <- mortality[mortality$state == state, which(names(mortality) == disease)]
str(mystate.df)
mystate.df <- mortality[c(1,mortality$state == state), which(names(mortality) == disease)]
str(mystate.df)
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
str(mystate.df)
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
stateorder[1:5]
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", 1, num)
ifelse(num == "worst", length(stateorder), num)
if(!is.numeric(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", 1, num)
ifelse(num == "worst", length(stateorder), num)
#if(!is.numeric(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
}
rankhospital("TX","heart failure", num = "best")
args
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", 1, num)
ifelse(num == "worst", length(stateorder), num)
#if(!is.numeric(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(args)
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", as.numeric(1), num)
ifelse(num == "worst", length(stateorder), num)
#if(!is.numeric(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(args)
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", as.numeric(1), num)
ifelse(num == "worst", length(stateorder), num)
#if(!is.numeric(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(class(num))
}
rankhospital("TX","heart failure", num = "best")
rankhospital("TX","heart failure", num = 1)
num <= four
num <- "four"
num <- as.numeric(num)
num
num <- 1
num <- as.numeric(num)
num
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
ifelse(num == "best", 1, num)
ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(in.na(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(class(num))
}
rankhospital("TX","heart failure", num = "best")
num = "best"
num <- ifelse(num == "best", 1, num)
num
num <- as.numeric(num)
if(in.na(num)) stop("invalid num")
if(is.na(num)) stop("invalid num")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(class(num))
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(args)
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(mystate.df[num,1])
}
rankhospital("TX","heart failure", num = "best")
rankhospital("TX","heart failure", num = "worst")
rankhospital("TX","heart failure", num = 5)
rankhospital("TX","heart failure", num = 5000)
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1])
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
args <- paste(state, outcome, num, sep = ", ")
return(as.character(mystate.df[num,1]))
}
rankhospital("TX","heart failure", num = "best")
rankhospital("TX","heart failure", num = "worst")
rankhospital("TX","heart failure", num = 5)
tail(mystate.df)
head(mystate.df)
rankhospital("TX","heart attack", num = 5)
rankhospital("TX","heart attack", num = 1)
head(mystate.df)
rankhospital("TX","heart failure", num = 5)
ls()
rm(mystate.df,stateorder)
rankhospital("TX","heart failure", num = 5)
head(mystate.df)
rankhospital("TX","pneumonia", num = 1)
ls()
mortality[mortality == 9.1]
ls()
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
texas <- mortality[mortality$state == "TX", c(1,3:5)]
head(texas)
texorder <- order(texas[,which(names(texas) == "heart_failure")],texas[,1])
head(texas[texorder,c(1,3:5)])
texorder[1:5]
texas[texorder[1:10],]
rankhospital("TX","heart failure", num = "best")
state <- "TX"
disease <- "heart_failure"
num <- 1
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
as.character(mystate.df[num,1])
mystate.df <- mortality[mortality$state == state[1], c(1,which(names(mortality) == disease[1]))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease[1])],mystate.df[,1], na.last = T)
as.character(mystate.df[num,1])
state
state[1]
disease
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
mystate.df[1,1]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
stateorder[1]
mystate.df[42,1]
texas <- mystate.df[stateorder[1:10],]
head(texas)
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
}
rankhospital("TX","heart failure", num = "best")
rankhospital <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
return(mystate.df)
}
rankhospital("TX","heart failure", num = "best")
rankhospital("TX","heart failure", num = 2)
rankhospital("TX","heart failure", num = 5)
rankhospital("TX","heart failure", num = 6)
states
states <- as.character(unique(mortality$state))
states
output <- lapply(seq_along(states), rankhospital(i), "heart_failure",1)
states <- as.character(unique(mortality$state))
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- rankhospitals(var1,var2,var3)
output <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return output
}
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- rankhospitals(var1,var2,var3)
output <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return{output}
}
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- function(var1,var2,var3){
rankhospitals(var1,var2,var3)
}
output <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return{output}
}
output <- lapply(seq_along(states), rankhospital())
q
myfun <- rankhospitals(var1,var2,var3)
ls()
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- rankhospital(var1,var2,var3)
output <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return(output)
}
rankall("heart_attack",1)
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
rowbind(output) <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return(output)
}
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
}
rowbind(output) <- lapply(seq_along(states),myfun, var2 = outcome, var3 = num)
return(output)
}
rankall("heart_attack",1)
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
}
rowbind(output) <- lapply(seq_along(states),myfun)
return(output)
}
rankall <- function(outcome, num = "best") {
states <- as.character(unique(mortality$state))
myfun <- function(state, outcome, num = "best"){
## validate arguments
if(missing(num)) stop("missing argument")
## fix outcome names
disease <- sub("\\s+","_",outcome)
## fix column names
colnames(mortality) <- c("hospital", "state", "heart_attack","heart_failure","pneumonia")
mystate.df <- mortality[mortality$state == state, c(1,which(names(mortality) == disease))]
stateorder <- order(mystate.df[,which(names(mystate.df) == disease)],mystate.df[,1], na.last = T)
## recode "best" to 1 and "wworst" to length(stateorder)
num <- ifelse(num == "best", 1, num)
num <- ifelse(num == "worst", length(stateorder), num)
num <- as.numeric(num)
if(is.na(num)) stop("invalid num")
## order by outcome and hospital name
mystate.df <- mystate.df[stateorder[num],c(1,which(names(mystate.df) == disease))]
}
rowbind(output) <- lapply(seq_along(states),myfun)
return(output)
}
rankall("heart attack",1)
quit()
